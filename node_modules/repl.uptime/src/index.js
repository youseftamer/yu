"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startUptime = void 0;
const node_path_1 = require("node:path");
const node_fs_1 = require("node:fs");
const node_http_1 = require("node:http");
const node_fetch_1 = __importDefault(require("node-fetch"));
function getConfig() {
    const path = (0, node_path_1.resolve)("./uptime.config.json");
    const default_config = { debug: false, create_api: true, port: 3000, path: "/", body: { title: "Repl.uptime ⚡", description: " Don't worry about downtime anymore! With repl.uptime, your project will work 24 hours a day, 365 days a year. Powered by the npm package repl.uptime, you can rest easy knowing your project is always running. Try repl.uptime today and never worry about downtime again!", url: "https://npmjs.com/package/repl.uptime" } };
    try {
        let data = (0, node_fs_1.readFileSync)(`${path}`, { encoding: 'utf8', flag: 'r' });
        return Object.assign(Object.assign({}, default_config), JSON.parse(data));
    }
    catch (e) {
        return default_config;
    }
}
function createAPI() {
    return __awaiter(this, void 0, void 0, function* () {
        const config = getConfig();
        return new Promise((resolve, reject) => {
            const server = (0, node_http_1.createServer)((request, response) => {
                const reqURL = request.url;
                const reqMethod = request.method;
                if (reqMethod == "GET" && reqURL == config.path) {
                    response.writeHead(200, {
                        "Content-Type": "text/html",
                    });
                    response.write(`<!DOCTYPE html>
        <html dir="rtl">
        
        <head>
          <link rel="preconnect" href="https://fonts.googleapis.com">
          <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        
          <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
          <link
            href="https://fonts.googleapis.com/css2?family=Amiri&family=Cairo:wght@200;300;400;500;600;700;800;900;1000&family=Changa:wght@500&family=El+Messiri:wght@500&family=Noto+Kufi+Arabic:wght@900&display=swap"
            rel="stylesheet">
          <title>Repl.uptime ⚡</title>
          <style>
            a:hover {
              color: #212732;
            }
        
            body {
              background: linear-gradient(to right, #000, #0c0f17, #151a24);
              display: flex;
              justify-content: center;
              font-family: 'Cairo', 'Amiri', serif;
              font-weight: 600;
              align-items: center;
              min-height: 100vh;
              margin: 0;
            }
        
            .container {
              text-align: center;
              color: white;
            }
        
            h1 {
              font-size: 1.5rem;
              color: #ffbf00;
            }
        
            p {
              font-size: 0.75rem;
              margin: 0.5rem 1.25rem;
            }
        
            a {
              display: inline-block;
              background-color: white;
              color: #0C0F17;
              padding: 4px 12px;
              font-size: 0.75rem;
              text-decoration: none;
              font-weight: bold;
              border-radius: 5.625px;
            }
          </style>
        </head>
        
        <body>
          <script src="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0-alpha2/js/bootstrap.min.js"></script>
          <div class="container">
            <h1 dir="ltr"><i class="bi bi-lightning-charge-fill"></i> Repl.uptime</h1>
            <p>Don't worry about downtime anymore! With Repl.uptime, your project will work 24 hours a day, 365 days a year.
              Powered by the npm package Repl.uptime, you can rest easy knowing your project is always running. Try Repl.uptime
              today and never worry about downtime again<br><br>لا تقلق بشأن انقطاع الخدمة بعد الآن! مع Repl.uptime، سيعمل
              مشروعك على مدار 24 ساعة في اليوم، 365 يومًا في السنة. يتم تشغيل مشروعك دائمًا بفضل حزمة Repl.uptime. يمكنك أن
              ترتاح وتعلم أن مشروعك يعمل دومًا. جرب Repl.uptime اليوم ولا تقلق بشأن انقطاع الخدمة مرة أخرى</p>
            <a style="background-color: red;" dir="ltr" href="https://www.youtube.com/@Shuruhatik" target="_blank"
              rel="noopener noreferrer"><i class="bi bi-youtube"></i> يوتيوب </a>&nbsp;&nbsp;&nbsp;
            <a dir="ltr" href="https://npmjs.com/package/repl.uptime" target="_blank" rel="noopener noreferrer"><i
                class="bi bi-box-arrow-up-right"></i> اعرف المزيد </a>
          </div>
        
        </body>
        </html>`);
                    response.end();
                }
            });
            server.listen(config.port, () => {
                console.log(`⚡️ Uptime for your project is now created by \u001b[38;5;209m\u001b[1mRepl.Uptime\u001b[0m`);
                resolve(config);
            });
            server.on('error', (e) => {
                reject(e);
            });
        });
    });
}
function startUptime() {
    if (!(process.env.REPL_ID && process.env.REPL_SLUG && process.env.REPL_OWNER))
        throw TypeError("The Repl.uptime package only works with Replit projects");
    createAPI()
        .then((config) => {
        var _a, _b, _c;
        (0, node_fetch_1.default)(`https://api.shuruhatik.com/uptime/${(_a = process.env.REPL_ID) === null || _a === void 0 ? void 0 : _a.toLowerCase()}/${(_b = process.env.REPL_SLUG) === null || _b === void 0 ? void 0 : _b.toLowerCase()}/${(_c = process.env.REPL_OWNER) === null || _c === void 0 ? void 0 : _c.toLowerCase()}/${config.path.split("/").join("-")}`).then(r => r.json()).then((body) => config.debug ? console.log(body) : {}).catch((e) => config.debug ? console.log(e.message) : {});
        setTimeout(() => {
            var _a, _b, _c;
            (0, node_fetch_1.default)(`https://api.shuruhatik.com/uptime/${(_a = process.env.REPL_ID) === null || _a === void 0 ? void 0 : _a.toLowerCase()}/${(_b = process.env.REPL_SLUG) === null || _b === void 0 ? void 0 : _b.toLowerCase()}/${(_c = process.env.REPL_OWNER) === null || _c === void 0 ? void 0 : _c.toLowerCase()}/${config.path.split("/").join("-")}`).then(r => r.json()).then((body) => config.debug ? console.log(body) : {}).catch((e) => config.debug ? console.log(e.message) : {});
        }, 70000);
    }).catch((e) => {
        console.error(e);
    });
}
exports.startUptime = startUptime;
//# sourceMappingURL=index.js.map